/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.epsilony.levelset.ops;

import java.util.Arrays;
import net.epsilony.levelset.functions.EllipseLSF;
import net.epsilony.math.CoordinatePartDiffFunction;
import net.epsilony.utils.geom.Coordinate;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author epsilon
 */
public class NormUnionIntersectionTest {

    public NormUnionIntersectionTest() {
    }

    @Test
    public void testSomeMethod() {


// This piece of Java code is generated by simpmeshfree_gui/sample_helper/normed_union_intersection_sample.py:
// B_SHRINK=0.98, maybe you should check this constant in NormUnionIntersection.java
//2012-12-11 22:24:36.850467
        int[] ms = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};

        boolean[] isUnions = new boolean[]{true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false};

        double[][] xys = new double[][]{{-2, 2}, {-2, 2}, {-3, 1.1}, {-3, 1.1}, {0.1, -0.2}, {0.1, -0.2}, {-14, 1.1}, {-14, 1.1}, {0.2, -3.8}, {0.2, -3.8}, {-2, 2}, {-2, 2}, {-3, 1.1}, {-3, 1.1}, {0.1, -0.2}, {0.1, -0.2}, {-14, 1.1}, {-14, 1.1}, {0.2, -3.8}, {0.2, -3.8}, {-2, 2}, {-2, 2}, {-3, 1.1}, {-3, 1.1}, {0.1, -0.2}, {0.1, -0.2}, {-14, 1.1}, {-14, 1.1}, {0.2, -3.8}, {0.2, -3.8}};

        double[][] exp_vals = new double[][]{{2.16642782685254, 0.357969799792230, -0.420719254716391}, {0.198769730442964, 0.252017302650939, -0.181915393898489}, {2.00832674782687, 0.401201092311831, -0.114512174674568}, {0.00825798566270164, 0.394602226214052, -0.112628703961942}, {3.13330187950024, -0.106705559368017, 0.150401294700619}, {0.531243088655476, -0.0234467371511242, 0.0330481339952673}, {1.64114327596415e-16, 0.126026760101808, 2.11758236813575e-22}, {-1.99998812590857, 0.126048073224174, -1.33745511226684e-6}, {0.562302504152642, -0.101657340719487, 0.971958390989197}, {0.0935963611577353, -0.0144711809968489, 0.187528458297148}, {2.13139462689670, 0.466950306481352, -0.672591488546915}, {0.195555434713623, 0.258472017646477, -0.202707138354706}, {2.00839579627364, 0.407841225684266, -0.116407424032503}, {0.00825826958118457, 0.394643039736396, -0.112640353095729}, {4.07651784996201, -0.269264581461361, 0.379527945016775}, {0.691162874455753, -0.0526202311965142, 0.0741681215699972}, {1.64113353242150e-16, 0.126026011875172, 3.21504752815272e-22}, {-1.99997625188763, 0.126068637866829, -2.67489434346939e-6}, {0.131777318958881, -0.0483362080076207, 0.448324892038555}, {0.0219345947183002, -0.00747151936148513, 0.0806577638367101}, {2.09692794712857, 0.572312567141101, -0.916207676922483}, {0.192393117205577, 0.264652072427434, -0.222778867398594}, {2.00846484709438, 0.414481815172400, -0.118302803576525}, {0.00825855350942893, 0.394683855598722, -0.112652002897401}, {5.30366955376462, -0.520024173094323, 0.732973140033486}, {0.899223216691563, -0.0972331710242008, 0.137049980305616}, {1.64112378893669e-16, 0.126025263652978, 4.31249965669340e-22}, {-1.99996437793719, 0.126089202260855, -4.01231769374908e-6}, {0.0308824194517134, -0.0170723180004107, 0.156751352198626}, {0.00514043964428547, -0.00270717005039726, 0.0275054710245010}};

        double[][] exp_normed_vals = new double[][]{{0.857157109825205, 0.0777648107692398, -0.0913964062023810}, {0.190527508482481, 0.338458462683018, -0.244311814742887}, {0.820752932621704, 0.0976039169183584, -0.0278584405607500}, {0.00487257007581909, 0.239135311891822, -0.0682548106946072}, {0.990210170317932, -0.00618728780706319, 0.00872097107572619}, {0.850843337913554, -0.0616448924474527, 0.0868883654299669}, {1.11022302462516e-16, 0.0723482715087848, 1.05879118406788e-22}, {-0.818718592243977, 0.0308380070114057, -3.27212063417843e-7}, {0.296762061381749, -0.0489433217064903, 0.467953144148968}, {0.0706751795055051, -0.0135470717994621, 0.175553155581918}, {0.678132635236374, 0.107584570337372, -0.154963955057996}, {0.116365706928034, 0.202687362970357, -0.158957923965982}, {0.649170947790594, 0.0980971916086925, -0.0279992326936342}, {0.00341822924831836, 0.166500904074958, -0.0475232519957495}, {0.970490562634219, -0.0189044589719938, 0.0266458010420665}, {0.742556082804472, -0.0917057968107320, 0.129259156257421}, {6.66184171458364e-17, 0.0511576496638792, 1.30508196403825e-22}, {-0.647142893480610, 0.0304104390333694, -6.45241455204014e-7}, {0.0527772157765702, -0.0190965130614161, 0.177122751441785}, {0.00936919513313641, -0.00334989666246107, 0.0361633505590570}, {0.511361545438323, 0.114856908174871, -0.183872916757833}, {0.0731224092806391, 0.125206906776732, -0.105396691687914}, {0.493446841565888, 0.0846918208153028, -0.0241730263564968}, {0.00240347696703763, 0.116440522092910, -0.0332348482110750}, {0.943201699064213, -0.0356963074594546, 0.0503138813922242}, {0.649111283709564, -0.112467686147457, 0.158523002069847}, {4.71060548432735e-17, 0.0361737062206720, 1.23783986746922e-22}, {-0.491708437589263, 0.0258081700669398, -8.21248572805158e-7}, {0.00884471023641044, -0.00487864865552568, 0.0447938454307882}, {0.00148826538795248, -0.000790511815699827, 0.00803178205893146}};

        EllipseLSF ell1 = new EllipseLSF(-3, 1.1, 11, 6);
        EllipseLSF ell2 = new EllipseLSF(0.1, -0.2, 3.3, 4);
//end of generated codes!
        for (int i = 0; i < ms.length; i++) {
            CoordinatePartDiffFunction op = AtomOperations.union_intersection(isUnions[i], ms[i], ell1, ell2, 2);
            CoordinatePartDiffFunction normed_op = AtomOperations.normed_union_intersection(isUnions[i], ms[i], ell1, ell2, 2);
            Coordinate coord = new Coordinate(xys[i][0], xys[i][1]);

            op.setDiffOrder(1);
            normed_op.setDiffOrder(1);

            double[] acts = op.values(coord, null);
            double[] normed_acts = normed_op.values(coord, null);
            System.out.println("ms[i] = " + ms[i]);
            System.out.println("xy = " + Arrays.toString(xys[i]));
            System.out.println("isUnions[i] = " + isUnions[i]);
            System.out.println("acts = " + Arrays.toString(acts));
            System.out.println("normed_acts = " + Arrays.toString(normed_acts));
            assertArrayEquals(exp_vals[i], acts, 1e-10);
            assertArrayEquals(exp_normed_vals[i], normed_acts, 1e-10);
        }
    }
}
